//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



using System.Collections.Generic;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="INterface1")]
public interface INterface1
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Add", ReplyAction="http://tempuri.org/INterface1/AddResponse")]
    void Add(string column);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Add", ReplyAction="http://tempuri.org/INterface1/AddResponse")]
    System.Threading.Tasks.Task AddAsync(string column);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Remove", ReplyAction="http://tempuri.org/INterface1/RemoveResponse")]
    void Remove(string column);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Remove", ReplyAction="http://tempuri.org/INterface1/RemoveResponse")]
    System.Threading.Tasks.Task RemoveAsync(string column);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Delete", ReplyAction="http://tempuri.org/INterface1/DeleteResponse")]
    void Delete(string where, string whereValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Delete", ReplyAction="http://tempuri.org/INterface1/DeleteResponse")]
    System.Threading.Tasks.Task DeleteAsync(string where, string whereValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Check", ReplyAction="http://tempuri.org/INterface1/CheckResponse")]
    List<string> Check([System.ServiceModel.MessageParameterAttribute(Name="check")] string check1, bool silent);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Check", ReplyAction="http://tempuri.org/INterface1/CheckResponse")]
    System.Threading.Tasks.Task<List<string>> CheckAsync(string check, bool silent);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Modify", ReplyAction="http://tempuri.org/INterface1/ModifyResponse")]
    void Modify(string set, string setValue, string where, string whereValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Modify", ReplyAction="http://tempuri.org/INterface1/ModifyResponse")]
    System.Threading.Tasks.Task ModifyAsync(string set, string setValue, string where, string whereValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/SearchPath", ReplyAction="http://tempuri.org/INterface1/SearchPathResponse")]
    List<string> SearchPath(string column, string text);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/SearchPath", ReplyAction="http://tempuri.org/INterface1/SearchPathResponse")]
    System.Threading.Tasks.Task<List<string>> SearchPathAsync(string column, string text);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Search", ReplyAction="http://tempuri.org/INterface1/SearchResponse")]
    List<string> Search(string column, string text);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Search", ReplyAction="http://tempuri.org/INterface1/SearchResponse")]
    System.Threading.Tasks.Task<List<string>> SearchAsync(string column, string text);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Columns", ReplyAction="http://tempuri.org/INterface1/ColumnsResponse")]
    List<string> Columns();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Columns", ReplyAction="http://tempuri.org/INterface1/ColumnsResponse")]
    System.Threading.Tasks.Task<List<string>> ColumnsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Insert", ReplyAction="http://tempuri.org/INterface1/InsertResponse")]
    bool Insert(string name, string fullPath, string type, double size, System.DateTime dateCreated);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Insert", ReplyAction="http://tempuri.org/INterface1/InsertResponse")]
    System.Threading.Tasks.Task<bool> InsertAsync(string name, string fullPath, string type, double size, System.DateTime dateCreated);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface INterface1Channel : INterface1, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class Nterface1Client : System.ServiceModel.ClientBase<INterface1>, INterface1
{
    
    public Nterface1Client()
    {
    }
    
    public Nterface1Client(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public Nterface1Client(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public Nterface1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public Nterface1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void Add(string column)
    {
        base.Channel.Add(column);
    }
    
    public System.Threading.Tasks.Task AddAsync(string column)
    {
        return base.Channel.AddAsync(column);
    }
    
    public void Remove(string column)
    {
        base.Channel.Remove(column);
    }
    
    public System.Threading.Tasks.Task RemoveAsync(string column)
    {
        return base.Channel.RemoveAsync(column);
    }
    
    public void Delete(string where, string whereValue)
    {
        base.Channel.Delete(where, whereValue);
    }
    
    public System.Threading.Tasks.Task DeleteAsync(string where, string whereValue)
    {
        return base.Channel.DeleteAsync(where, whereValue);
    }
    
    public List<string> Check(string check1, bool silent)
    {
        return base.Channel.Check(check1, silent);
    }
    
    public System.Threading.Tasks.Task<List<string>> CheckAsync(string check, bool silent)
    {
        return base.Channel.CheckAsync(check, silent);
    }
    
    public void Modify(string set, string setValue, string where, string whereValue)
    {
        base.Channel.Modify(set, setValue, where, whereValue);
    }
    
    public System.Threading.Tasks.Task ModifyAsync(string set, string setValue, string where, string whereValue)
    {
        return base.Channel.ModifyAsync(set, setValue, where, whereValue);
    }
    
    public List<string> SearchPath(string column, string text)
    {
        return base.Channel.SearchPath(column, text);
    }
    
    public System.Threading.Tasks.Task<List<string>> SearchPathAsync(string column, string text)
    {
        return base.Channel.SearchPathAsync(column, text);
    }
    
    public List<string> Search(string column, string text)
    {
        return base.Channel.Search(column, text);
    }
    
    public System.Threading.Tasks.Task<List<string>> SearchAsync(string column, string text)
    {
        return base.Channel.SearchAsync(column, text);
    }
    
    public List<string> Columns()
    {
        return base.Channel.Columns();
    }
    
    public System.Threading.Tasks.Task<List<string>> ColumnsAsync()
    {
        return base.Channel.ColumnsAsync();
    }
    
    public bool Insert(string name, string fullPath, string type, double size, System.DateTime dateCreated)
    {
        return base.Channel.Insert(name, fullPath, type, size, dateCreated);
    }
    
    public System.Threading.Tasks.Task<bool> InsertAsync(string name, string fullPath, string type, double size, System.DateTime dateCreated)
    {
        return base.Channel.InsertAsync(name, fullPath, type, size, dateCreated);
    }
}
