//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary1.MODEL")]
    public partial class Tag : object
    {
        
        private int Tag_IdField;
        
        private string Tag_NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Tag_Id
        {
            get
            {
                return this.Tag_IdField;
            }
            set
            {
                this.Tag_IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tag_Name
        {
            get
            {
                return this.Tag_NameField;
            }
            set
            {
                this.Tag_NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Pic_Vid", Namespace="http://schemas.datacontract.org/2004/07/ClassLibrary1.MODEL")]
    public partial class Pic_Vid : object
    {
        
        private System.DateTime Date_CreatedField;
        
        private System.DateTime Date_ModifiedField;
        
        private string Full_PathField;
        
        private string NameField;
        
        private double SizeField;
        
        private string TypeField;
        
        private int Unique_IdField;
        
        private string ValuesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date_Created
        {
            get
            {
                return this.Date_CreatedField;
            }
            set
            {
                this.Date_CreatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date_Modified
        {
            get
            {
                return this.Date_ModifiedField;
            }
            set
            {
                this.Date_ModifiedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Full_Path
        {
            get
            {
                return this.Full_PathField;
            }
            set
            {
                this.Full_PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Size
        {
            get
            {
                return this.SizeField;
            }
            set
            {
                this.SizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Unique_Id
        {
            get
            {
                return this.Unique_IdField;
            }
            set
            {
                this.Unique_IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Values
        {
            get
            {
                return this.ValuesField;
            }
            set
            {
                this.ValuesField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.INterface1")]
    public interface INterface1
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/GetAllTags", ReplyAction="http://tempuri.org/INterface1/GetAllTagsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference1.Tag>> GetAllTagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/GetAllPics_Vids", ReplyAction="http://tempuri.org/INterface1/GetAllPics_VidsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference1.Pic_Vid>> GetAllPics_VidsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Add", ReplyAction="http://tempuri.org/INterface1/AddResponse")]
        System.Threading.Tasks.Task AddAsync(string column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Remove", ReplyAction="http://tempuri.org/INterface1/RemoveResponse")]
        System.Threading.Tasks.Task RemoveAsync(string column);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Delete", ReplyAction="http://tempuri.org/INterface1/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(string where, string whereValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Check", ReplyAction="http://tempuri.org/INterface1/CheckResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> CheckAsync(string check, bool silent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Modify", ReplyAction="http://tempuri.org/INterface1/ModifyResponse")]
        System.Threading.Tasks.Task ModifyAsync(string set, string setValue, string where, string whereValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/SearchPath", ReplyAction="http://tempuri.org/INterface1/SearchPathResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> SearchPathAsync(string column, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Search", ReplyAction="http://tempuri.org/INterface1/SearchResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> SearchAsync(string column, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Columns", ReplyAction="http://tempuri.org/INterface1/ColumnsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> ColumnsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INterface1/Insert", ReplyAction="http://tempuri.org/INterface1/InsertResponse")]
        System.Threading.Tasks.Task<bool> InsertAsync(string name, string fullPath, string type, double size, System.DateTime dateCreated);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface INterface1Channel : ServiceReference1.INterface1, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class Nterface1Client : System.ServiceModel.ClientBase<ServiceReference1.INterface1>, ServiceReference1.INterface1
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Nterface1Client() : 
                base(Nterface1Client.GetDefaultBinding(), Nterface1Client.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_INterface1.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Nterface1Client(EndpointConfiguration endpointConfiguration) : 
                base(Nterface1Client.GetBindingForEndpoint(endpointConfiguration), Nterface1Client.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Nterface1Client(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Nterface1Client.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Nterface1Client(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Nterface1Client.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Nterface1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference1.Tag>> GetAllTagsAsync()
        {
            return base.Channel.GetAllTagsAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference1.Pic_Vid>> GetAllPics_VidsAsync()
        {
            return base.Channel.GetAllPics_VidsAsync();
        }
        
        public System.Threading.Tasks.Task AddAsync(string column)
        {
            return base.Channel.AddAsync(column);
        }
        
        public System.Threading.Tasks.Task RemoveAsync(string column)
        {
            return base.Channel.RemoveAsync(column);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(string where, string whereValue)
        {
            return base.Channel.DeleteAsync(where, whereValue);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> CheckAsync(string check, bool silent)
        {
            return base.Channel.CheckAsync(check, silent);
        }
        
        public System.Threading.Tasks.Task ModifyAsync(string set, string setValue, string where, string whereValue)
        {
            return base.Channel.ModifyAsync(set, setValue, where, whereValue);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> SearchPathAsync(string column, string text)
        {
            return base.Channel.SearchPathAsync(column, text);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> SearchAsync(string column, string text)
        {
            return base.Channel.SearchAsync(column, text);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> ColumnsAsync()
        {
            return base.Channel.ColumnsAsync();
        }
        
        public System.Threading.Tasks.Task<bool> InsertAsync(string name, string fullPath, string type, double size, System.DateTime dateCreated)
        {
            return base.Channel.InsertAsync(name, fullPath, type, size, dateCreated);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_INterface1))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_INterface1))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return Nterface1Client.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_INterface1);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return Nterface1Client.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_INterface1);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_INterface1,
        }
    }
}
